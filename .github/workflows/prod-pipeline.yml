name: CI Deploy in preprod

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 22
            
      - name: Install packages
        run: npm i
            
      - name: Run tests
        run: npm run test
        
      - name: Build
        run: npm run build
   
  deploy:
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Commit to docker hub as latest
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: norookezi/lavoiepailletee-api:latest
          labels: ${{  github.ref_name }}

      - name: Commit to docker hub as release tag
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: norookezi/lavoiepailletee-api:${{  github.ref_name }}
          labels: ${{  github.ref_name }}

      - name: Install wireguard
        run: sudo apt-get update && sudo apt-get install -y wireguard resolvconf
  
      - name: Create WireGuard config
        run: |
          echo -e "${{ secrets.PROD_VPN }}" > ./wg0.conf
  
      - name: Setup WireGuard interface
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show

      - name: Deploy to servers
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}
          SERVER_IPS: ${{ secrets.PROD_SSH_SERVER }}
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          DEPLOY_PATH: ${{ secrets.PROD_PATH }}
        run: |
          echo -e "$SSH_PRIVATE_KEY" > private_key
          chmod 400 private_key
          
          IFS=',' read -ra SERVERS <<< "$SERVER_IPS"
          for SERVER in "${SERVERS[@]}"; do
            mkdir -p ~/.ssh
            ssh-keyscan $SERVER >> ~/.ssh/known_hosts
            echo "StrictHostKeyChecking no" >> ~/.ssh/config
            scp -i private_key -r ./docker-compose.yml ${SSH_USER}@${SERVER}:$DEPLOY_PATH
            scp -i private_key -r ./.env ${SSH_USER}@${SERVER}:$DEPLOY_PATH
            ssh -i private_key -o StrictHostKeyChecking=no ${SSH_USER}@${SERVER} bash -c "'
              cd $DEPLOY_PATH
              docker compose down
              docker compose pull
              docker compose build
              docker compose up -d
            '"
          done